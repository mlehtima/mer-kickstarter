#!/usr/bin/python3

# mer-kickstarter tool to convert .yaml files to .ks files
# Copyright (C) 2011 Anas Nashif <anas.nashif@intel.com>
# Copyright (C) 2012 Marko Saukko <marko.saukko@jollamobile.com>
 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import yaml
import sys
import os
import copy
import optparse
import errno

from kickstart import kickstart

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST:
            pass
        else: raise

class KSWriter():
    def __init__(self, out):
        self.outdir = out
        pass
      
    def merge(*input):
        return list(reduce(set.union, input, set()))

    def __merge_dictionaries(self, first, second):
        out = copy.copy(first)
        for k,v in second.items():
            if k in out:
                if isinstance(out[k], list) and isinstance(v, list):
                    temp = copy.copy(v)
                    temp.extend(out[k])
                    out[k] = temp
                elif isinstance(out[k], list) or isinstance(v, list):
                    sys.exit("Error: Type mismatch. Can not combine list with non-list for field '%s'" % k)
                elif isinstance(out[k], dict) and isinstance(v, dict):
                    temp = copy.copy(v)
                    temp.update(out[k])
                    out[k] = temp
                elif isinstance(out[k], dict) or isinstance(v, dict):
                    sys.exit("Error: Type mismatch. Can not combine dict with non-dict for field '%s'" % k)
                else:
                    out[k] = v
            else:
                out[k] = v
        return out
    
    def __read_config_file(self, image_meta,config_file):
        output = ''
        path = None
        if os.path.exists(config_file):
            path = config_file
        elif 'ExternalConfigs' in image_meta:
            for extconfdir in image_meta['ExternalConfigs']:
                if os.path.exists('%s/%s' % (extconfdir,config_file)):
                    path = '%s/%s' % (extconfdir,config_file)
                    break
        if path:
            f = open(path, 'r')
            output += f.read()
            output += "\n"
            f.close()
        else:
            print ('WARNING: %s not found, skipping.' % config_file)
        return output
    
    def __recursive_inherit(self, conf, image_meta, element_to_check, already_inherited):

        # If there is no inherit elements return the current structure.
        if "Inherit" not in element_to_check or "Inherit" not in element_to_check:
            return conf

        for x in element_to_check["Inherit"]:
            if x in already_inherited:
                continue
            already_inherited.append(x)
            if x not in image_meta:
                print ("WARNING: Unable to find inherit section '%s' ignoring." % x)
                continue
                
            # First check sub elements
            conf = self.__recursive_inherit(conf, image_meta, image_meta[x], already_inherited)
            
            # ... end of the tree so merge the dictionary
            conf = self.__merge_dictionaries(conf, image_meta[x])

        return conf

    def parse(self, image_meta, configuration):
        conf = {}
        
        already_inherited = []
        if 'Inherit' in configuration and configuration["Inherit"]:
            conf = self.__recursive_inherit(conf, image_meta, configuration, already_inherited)
            # After the inherited elements have been merged merge the main config that overrides
            # everything else.
            conf = self.__merge_dictionaries(conf, configuration)
        
        prescript = ""
        if 'PreScripts' in conf:
            for scr in conf['PreScripts']:
                prescript += self.__read_config_file(image_meta,scr)

        postscript = ""
        if 'PostScripts' in conf:
            for scr in conf['PostScripts']:
                postscript += self.__read_config_file(image_meta,scr)

        nochrootscript = ""
        if 'NoChrootScripts' in conf:
            for scr in conf['NoChrootScripts']:
                nochrootscript += self.__read_config_file(image_meta,scr)

        if "Part" in conf:
            part_output = self.__read_config_file(image_meta,conf['Part'])
            if part_output != '':
               conf['Part'] = part_output
            else:
                print ("WARNING: The Part: key takes a filename as an argument and %s was not found" % conf['Part'])
                del conf['Part']

        if prescript:
            conf['Pre'] = prescript
        if postscript:
            conf['Post'] = postscript
        if nochrootscript:
            conf['NoChroot'] = nochrootscript
        return conf

    def __handle_repo_url_vars(self, r, var_dict):
        try:
            for key in var_dict:
                r['Url'] = r['Url'].replace("%s" % key, var_dict[key])
        except:
            print ("WARNING: Ignoring badly specified RepositoryUrlVariables. It should be a set (not list) of Key: Value")

        return r
        
    def process_files(self, meta, repos, global_repo_url_vars):
        new_repos = []

        if 'FileName' not in meta or not meta['FileName']:
            meta['FileName'] = meta['Name'].replace(" ", "_")
            print ("WARNING: FileName field missing. Writing as '%s'." % meta['FileName'])
        
        # Substitue repository values that are found.
        for repo in repos:
            r = {}
            r['Name'] = repo['Name']

            # If there is image type specifier and there is url for that lets use it
            if 'ImageType' in meta and 'Url-'+meta['ImageType'] in repo:
              r['Url'] = repo['Url-'+meta['ImageType']]
            # Else if there is URL key present
            elif 'Url' in repo:
              r['Url'] = repo['Url']
            # .. if no default url defined then skip the repo.
            else:
              continue

            if 'Options' in repo:
                r['Options'] = repo['Options']

            if "Architecture" in meta and meta['Architecture']:
                # Prefer RepositoryArchitecture if present, otherwise use Architecture
                repo_arch = meta['Architecture']
                if 'RepositoryArchitecture' in meta and meta['RepositoryArchitecture']:
                    repo_arch = meta['RepositoryArchitecture']
                r['Url'] = r['Url'].replace("@ARCH@", repo_arch)
            
            if "RepositoryURLVariables" in meta and meta['RepositoryURLVariables']:
                self.__handle_repo_url_vars(r,meta['RepositoryURLVariables'])
            
            if global_repo_url_vars:
                self.__handle_repo_url_vars(r,global_repo_url_vars)

            new_repos.append(r)

        # Check that all repos are actually found from repos data set
        if "Repos" in meta:
            # Convert list to set to remove duplicated entries.
            # NOTE: This mixes the order that repos were introduced, but that 
            # shouldn't matter as all the handling is already over.
            meta['Repos'] = set(meta['Repos'])
            for selected_repo in meta['Repos']:
                found = False
                for repo in repos:
                    if repo['Name'] == selected_repo:
                        found = True
                        break
                if not found:
                    print ("WARNING: Repository with name '%s' is not found, ignoring the repo for file '%s.ks'." % (selected_repo, meta['FileName']))

        nameSpace = {'metadata': meta,  'repos': new_repos}
        t = kickstart(searchList=[nameSpace])
        a = str(t)
        
        f = None
        
        if not os.path.exists(self.outdir):
            mkdir_p(self.outdir)
        
        ksFile = "%s/%s.ks" % ( self.outdir, meta['FileName'] )
        f = open(ksFile, 'w')
        print ("Creating %s (%s)" %(conf['Name'], ksFile ))
        f.write(a)
        f.close()

def recursive_yaml_load(stream,read_yaml_files, ext_conf_path = None):
    inp = yaml.load(stream, Loader = yaml.SafeLoader)
    out = {}
    if ext_conf_path:
        if 'ExternalConfigs' in inp and inp['ExternalConfigs']:
            inp['ExternalConfigs'].append(ext_conf_path)
        else:
            inp['ExternalConfigs'] = [ext_conf_path]
    
    if 'ExternalConfigs' not in inp or not inp['ExternalConfigs']:
        return inp

    for path in inp['ExternalConfigs']:
        if not os.path.exists(path):
            print ("WARNING: path '%s' doesn't exist ignoring." % (path))
            continue
        for f in os.listdir(path):
            if f.endswith('.yaml'):
                filename = '%s/%s' % (path, f)

                # Prevent infinite recusion loops
                if filename in read_yaml_files:
                    print ("WARNING: File '%s' already read, ignoring the file." % (filename))
                    continue
                read_yaml_files.append(filename)

                fp = open(filename, 'r')
                ext = recursive_yaml_load(fp, read_yaml_files)
                for k,v in ext.items():
                    if k in inp and isinstance(v, list) and not isinstance(inp[k], list):
                        print ("Different type (list vs not list) of values: %s in %s/%s" % (k, path, f))
                        break  
                    elif k in inp and not isinstance(v, list) and isinstance(inp[k], list):
                        print ("Different type (list vs not list) of values: %s in %s/%s" % (k, path, f))
                        break  
                    elif k in inp and not isinstance(v, list):
                        print ("Collision of values: %s in %s/%s" % (k, path, f))
                        break
                    elif k in inp and isinstance(v, list):
                        # External configs come first
                        v.extend(inp[k])
                        out[k] = v
                    else:
                        out[k] = v
                for k,v in inp.items():
                    # we already merged if it's already there
                    if k not in out:
                        out[k] = v
                inp = out
                out = {}
                        
    return inp

if __name__ == '__main__':
    parser = optparse.OptionParser()

    parser.add_option("-c", "--configs", type="string", dest="configsfile",
                    help="configuration meta file")
    parser.add_option("-o", "--outdir", type="string", dest="outdir",
                    help="outdir", default=".")
    parser.add_option("-e", "--external-config-path", type="string", dest="ext_conf_path",
                    help="directory containing external configs", default=None)
    parser.add_option("-r", "--repo-url-variables", type="string", dest="repo_url_variables",
                    help="Repository URL variables.", default=None)
    (options, args) = parser.parse_args()

    if options.configsfile is None:
        print ("you need to provide meta file with --configs")
        sys.exit(1)
    
    if not os.path.isfile(options.configsfile):
        print ("ERROR: Given configuration file is not file '%s'." % (options.configsfile))
        sys.exit(1)

    read_yaml_files = [ options.configsfile ]
    image_meta = recursive_yaml_load(open(options.configsfile, 'r'),read_yaml_files, options.ext_conf_path)

    repositories = None
    global_repo_url_vars = {}
    if 'Repositories' in image_meta and image_meta['Repositories']:
        repositories = image_meta['Repositories']

    if 'RepositoryURLVariables' in image_meta and image_meta['RepositoryURLVariables']:
        global_repo_url_vars = image_meta['RepositoryURLVariables']
    
    if options.repo_url_variables:
        try:
            variable_pairs = options.repo_url_variables.split(",")
            for var in variable_pairs:
                if not var:
                    continue
                try:
                    (key,value) = var.split(":")
                    global_repo_url_vars[key] = value
                except:
                    print ("ERROR: invalid repo URL variable '%s' given on cmdline." % (var))
                    sys.exit(1)
        except ValueError:
            print ("ERROR: Invalid value given for repository URL variables '%s'" % (options.repo_url_variables))
            sys.exit(1)
    
    if 'Configurations' in image_meta and image_meta['Configurations']:
        ks = KSWriter(options.outdir)
        for configuration in image_meta['Configurations']:
            conf = ks.parse(image_meta, configuration)
            if 'Active' in conf and conf['Active']:
                ks.process_files(conf, repositories, global_repo_url_vars)
            else:
                filename = None
                if 'Filename' in configuration and configuration['Filename']:
                   filename = configuration['Filename']
                print ("%s is inactive, not generating file '%s' this time." %(configuration['Name'], filename))
    else:
        print ("WARNING: No 'Configurations' found from yaml.")

